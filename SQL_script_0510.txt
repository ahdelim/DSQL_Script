1. 
Find prime number within 1000, concat them with &: 2&3&5&7.... until 1000'

SET @potential_prime = 1;
SET @divisor = 1;

SELECT GROUP_CONCAT(POTENTIAL_PRIME SEPARATOR '&') FROM
    (SELECT @potential_prime := @potential_prime + 1 AS POTENTIAL_PRIME FROM
    information_schema.tables t1,
    information_schema.tables t2
    LIMIT 1000) list_of_potential_primes
WHERE NOT EXISTS(
    SELECT * FROM
        (SELECT @divisor := @divisor + 1 AS DIVISOR FROM
        information_schema.tables t4,
        information_schema.tables t5
        LIMIT 1000) list_of_divisors
    WHERE MOD(POTENTIAL_PRIME, DIVISOR) = 0 AND POTENTIAL_PRIME <> DIVISOR);

--------------------------------------------------------------
2.
Plot Star triangle from wide to narrow
****
***
**
*

set @row := 21;
select repeat('* ', @row := @row - 1) from information_schema.tables where @row > 1

--------------------------------------------------------------
3.
Remake string using concat()

SELECT CONCAT(NAME, IF(SUBSTRING_INDEX(OCCUPATION,' ', -1) = 'Doctor','(D)',
                  IF(SUBSTRING_INDEX(OCCUPATION,' ', -1) = 'Professor', '(P)',
                     IF(SUBSTRING_INDEX(OCCUPATION,' ', -1) = 'Singer ', '(S)','(A)'))))
FROM OCCUPATIONS
ORDER BY NAME;

SELECT CONCAT("There are a total of ",COUNT(OCCUPATION)," ",LCASE(OCCUPATION),"s.")
FROM OCCUPATIONS
GROUP BY OCCUPATION
ORDER BY COUNT(OCCUPATION), OCCUPATION;

--------------------------------------------------------------
4.
Advanced question to Q3, PIVOT the table

set @r1=0, @r2=0, @r3=0, @r4=0;
select min(Doctor), min(Professor), min(Singer), min(Actor)
from(
  select (
      case  when Occupation='Doctor' then (@r1:=@r1+1) -- Add the row number because need to group by rownumber later
            when Occupation='Professor' then (@r2:=@r2+1)
            when Occupation='Singer' then (@r3:=@r3+1)
            when Occupation='Actor' then (@r4:=@r4+1) end) as RowNumber,
    (case when Occupation='Doctor' then Name end) as Doctor,
    (case when Occupation='Professor' then Name end) as Professor,
    (case when Occupation='Singer' then Name end) as Singer,
    (case when Occupation='Actor' then Name end) as Actor
  from OCCUPATIONS
  order by Name
) Temp
group by RowNumber

--------------------------------------------------------------
5.
Case and Join usage

SELECT (CASE WHEN g.grade >= 8 THEN s.name ELSE NULL END), g.grade, s.marks
FROM students as s INNER JOIN grades as g
ON s.marks BETWEEN g.min_mark AND g.max_mark
ORDER BY g.grade DESC, s.name, s.marks;

--------------------------------------------------------------
6. 
Multiple tables join

SELECT 
    h.hacker_id, h.name
FROM 
    hackers AS h 
    INNER JOIN submissions AS s ON h.hacker_id = s.hacker_id
    INNER JOIN challenges AS c ON s.challenge_id = c.challenge_id
    INNER JOIN difficulty AS d ON (c.difficulty_level = d.difficulty_level AND s.score = d.score)
GROUP BY h.hacker_id, h.name
HAVING count(s.hacker_id) > 1
ORDER BY count(s.hacker_id) DESC, s.hacker_id ASC;

--------------------------------------------------------------
7.
Project date problem, sort date (but not consecutive date)

SELECT start_date, min(end_date)
FROM (
SELECT start_date 
FROM projects 
WHERE start_date NOT IN (
    SELECT end_date FROM projects
)) AS s,
(SELECT end_date
FROM projects
WHERE end_date NOT IN (
    SELECT start_date FROM projects
)) AS e
WHERE start_date < end_date
GROUP BY start_date
-- ORDER BY DATEDIFF(min(end_date), start_date), start_date
ORDER BY (DAY(min(end_date)) - day(start_date)), start_date

--------------------------------------------------------------
8.
Double join a tables 
(inner join a as a on a.id = main.id)
(inner join a as a2 on a.id = c.id)

SELECT s.name FROM students AS s
INNER JOIN friends AS f on s.id = f.id
INNER JOIN packages AS p on s.id = p.id
INNER JOIN packages AS p2 on f.friend_id = p2.id
WHERE (p2.salary > p.salary)
ORDER BY p2.salary;

--------------------------------------------------------------
